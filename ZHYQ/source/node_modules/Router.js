var pages = require('pages.js');
var App = require('App');
var GoogleAnalytics = require('GoogleAnalytics');
var signModel = require('model/signModel');
var FamousEngine = require('famous/core/FamousEngine');
var Commands = require('famous/core/Commands');
var Align        = require('famous/components/Align');
var Ajax = require('Ajax');
var CrossCall = require('famous/core/CrossCall');


function reSetSceneReceive(node){
	var _this = node;
	_this.scene.onReceive = function(e, p){
		if( e === 'backbutton' && !_this._animationRunning){
			//TODO 检测场景是否isShow
			//调用当前页面的Back 函数
			_this.currentPage.back(p);
		}else if (e === 'CONTEXT_RESIZE') {
			//重写CONTEXT_RESIZE 事件 实现软键盘监听
	        if (p.length < 2)
	            throw new Error(
	                    'CONTEXT_RESIZE\'s payload needs to be at least a pair' +
	                    ' of pixel sizes'
	            );

			var size = _this.scene.getAbsoluteSize();
	        if (size[1] != 0 && size[1] == p[1]){
	            
	            _this.currentPage.emit("softKeyBoardDown", p);

	        }else if (size[1] != 0 && 50<size[1] - p[1]< size[1]/2 ){

	            _this.currentPage.emit("softKeyBoardUp", p);

	        } else{

	        	_this.scene.setSizeMode('absolute', 'absolute', 'absolute');
	            _this.scene.setAbsoluteSize(p[0],
	                             p[1],
	                             p[2] ? p[2] : 0);

	            _this.scene._updater.message(Commands.WITH).message(_this.scene._selector).message(Commands.READY);
	        }
		}else if (_this.currentPage &&_this.currentPage.onReceive) {
			_this.currentPage.onReceive(e, p);
		} 
	}
}

class Router  {
	constructor(  ){
		//var _this = this;
		this.pages   = pages;
		this._timer = null;
		//页面是否缓存
		this.pageCache   = [];
		this.scene   = FamousEngine._scenes.body;
		//反链接 this
		this.scene._Router = this;
		//堆
		this.history = [];
		//过场动画是否进行
		this._animationRunning = false;
		//To 结束时调用
		this._onToEnd = {onReceive:this._onToAnimationEnd.bind(this)};
		//back 结束时调用
		this._onBackEnd = {onReceive:this._onBackAnimationEnd.bind(this)};
		//重写场景事件调度器
		reSetSceneReceive(this);
	}
	// 检测页面是否存在历史记录里面，存在返回该历史节点（包括id和node），否则返回null
	find(id){
		for( var i = 0; i < this.history.length; i++ )
			if( this.history[i].id === id ) 
				return i;
		return null;
	}
	// 格式化opt
	format( opt, method ){
		opt = opt || {};

		var directions = {
			rtl: [ -1, 0, 0, 1, 0, 0],
			ltr: [ 1, 0, 0, -1, 0, 0],
			ttb: [ 0, 1, 0, 0, -1, 0],
			btt: [ 0, -1, 0, 0, 1, 0]
		}

		var direction = directions[opt.direction];
		direction = direction ? direction : directions[method];
		opt.direction = direction;

		opt.animate = opt.animate || {};
		opt.animate.duration = opt.animate.duration || 200;
		opt.animate.curev = opt.animate.curev || 'linear';

		return opt;
	}
	// 加载一个某一个页面
	load( id, data ){
		if( !this.pages[id] ) 
			throw new Error( 'Not found the page : ' + id );
		var nowPage = this.pageCache[id];
		if (!nowPage) {
			nowPage = new this.pages[id]( data );	
			this.pageCache[id] = nowPage;
			nowPage.setAlign( 1, 0, 0 )
				.getDOM()
				.addClass( 'page_change' )
				.setProperty("transition-duration", "0s");
		
			nowPage.addUIEvent("transitionend");
			//理应检测场景ID
			nowPage.mount( `body/${id}` );
			nowPage.getDOM().draw();
		}
		
		this.loadPage = nowPage;
		this.history.push({ id: id, node: nowPage });
		//通常用于Page初始化设置
		nowPage.onCreate(data);
		 
		return nowPage ;
	}
	// 前往一个页面
	// id            加载页面ID
	// opt.data      加载的页面的数据
	// opt.direction 页面动画方向,默认值: to: 'rtl', back: 'ltr'
	// opt.animate   动画效果
	//     .duration 动画时长 默认: 400
	//     .curev    动画曲线 默认: outCubic  可选：详情查看http://famous.org/learn/easing-curves.html
	to( id, opt ){
		//检测网络连接
		if(!this.checkConnection()) return;

		//检测是否登录过期
		if(opt){
			
			if(opt.data){
				if(opt.data.checkLogin != 0){
					if(!this.checkLogin()){
						// id = 'login';
						signModel.update({id:signModel.findOne.id},{'token':null});

						return;
					}
				}
			}
		}else{

			if(!this.checkLogin()){
				// id = 'login';
				signModel.update({id:signModel.findOne.id},{'token':null});

				return;
			}

		}
		
		if (!this.pages[id] ) 
			throw new Error( 'Not found the page : ' + id );
		//当动画进行时阻断操作
		if (this._animationRunning) return;
		if (this.currentPage) this.currentPage.onPause();
		//当系统启动另外一个新的Page时,在新Page启动之前被系统调用保存现有的Page中的持久数据、停止动画等,这个实现方法必须非常快。
        
		opt = this.format( opt, 'rtl' );

		var loadPageID = this.find( id );
		var nowPage = this.history[this.history.length-1].node;
		//检测加载页面是否已经挂载
		if( loadPageID !== null ){
			this.history.splice(loadPageID, 1) ;
		}
      	//加载当前页面并设置From 位置
		var loadPage = this.load( id, opt.data )
			.setAlign(opt.direction[3], opt.direction[4], opt.direction[5]);

		
		
		//添加动画完毕事件监听
     	loadPage.addComponent(this._onToEnd);
     	loadPage.getDOM().setProperty("transition-duration", ".2s").draw();	

     	
		//当Page可见未获得用户焦点不能交互时系统会调用	
		loadPage.onStart(opt.data);	

		setTimeout(function(){
			this._animationRunning = true;
			nowPage.setAlign( opt.direction[0]*.15, opt.direction[1]*.15, opt.direction[2]);
			loadPage.setAlign( 0, 0, 0 );
		}.bind(this),20);
		//this.history.push({id: id, node: loadPage});

		this._timer = setTimeout(function(){
			this._animationRunning&&this._onToAnimationEnd('transitionend',{});
		}.bind(this),400);

		//页面监听
		GoogleAnalytics.trackView(id);
		
	}
	_onToAnimationEnd(e, p){
		if (e!=='transitionend') return;
		
		clearTimeout(this._timer);

		//隐藏上一张页面
		this.currentPage&&this.currentPage.onStop();
		//关闭动画监听
		this.currentPage && this.currentPage.getDOM().setProperty("transition-duration", "0s");

		this.currentPage = this.loadPage;
		//理应检测 _status
		this.currentPage.onResume();
		//移除动画监听
		this.currentPage.removeComponent(this._onToEnd);
		this._animationRunning = false;
		
	}

	_onBackAnimationEnd(e, p){
		if (e!=='transitionend') return;

		// clearTimeout(this._timer);

		this.history.pop();
		//移除动画监听
		this.currentPage.removeComponent(this._onBackEnd);
		
		//注销onCreate ()方法中创建的资源
		this.currentPage.onDestroy();
		//关闭动画监听
		this.currentPage.getDOM().setProperty("transition-duration", "0s");

		//调整当前页指向
		this.currentPage = this.loadPage;
		//当Page可见且获得用户焦点能交互时系统会调用
		this.currentPage.onResume();
		this.currentPage.getDOM().setProperty("transition-duration", ".3s");
		
		this._animationRunning = false;
		

	}
	// 返回上一个页面,
	// opt.pageId    指定回到某张页面
	// opt.reload    是否刷新数据
	// opt.direction 页面动画方向,默认值: to: 'rtl', back: 'ltr'
	// opt.animate   动画效果
	//     .duration 动画时长 默认: 400
	//     .curev    动画曲线 默认: outCubic  可选：详情查看http://famous.org/learn/easing-curves.html
	back( opt ) {
	
		var _this = this;

		opt = this.format( opt, 'ltr' );

		if(this.history.length == 1) return this.exitApp(); //双击CallBack 退出应用
		//当动画进行时阻断操作
		if (this._animationRunning) return;

		var nowPage = this.currentPage;
		var showPage = this._getPageFromHistory(opt.pageId);
		// this.history[this.history.length-2].node;
		this.loadPage = showPage;

		nowPage.addComponent(this._onBackEnd);
        //当Page已经停止然后重新被启动时系统会调用
		showPage.onRestart(opt);
        showPage.setAlign( 0, 0, 0 );
        
        setTimeout(function(){
        	this._animationRunning = true;
			nowPage.setAlign( opt.direction[0], opt.direction[1], opt.direction[2] );
			
        }.bind(this),20);

        // this._timer = setTimeout(function(){
        // 	this._onBackAnimationEnd('transitionend',{});
        // }.bind(this),400);
        
		
	}
	_getPageFromHistory(pageId){
		var key,
		disNode
		; 
		if (typeof pageId =='number' && this.history[pageId]){
 			key = pageId;
		}else if(typeof pageId =='string'){
			this.history.forEach(function(v,i){
				if (v.id === pageId){
					key = i;
				}
			});
		}else{
			key = this.history.length -2;
		}

		
		
		disNode = this.history.splice(key + 1,this.history.length - key - 2);
		
		//异步效果是否更好
		disNode.forEach(function(v){
			//v.node.onRestart();
			v.node.setAlign( 1, 0, 0 ).onDestroy();
		});


		return this.history[key].node;

	}
	//双击CallBack 退出应用
	exitApp() {
	 	if(!this._BackTime)  {
	 		this._BackTime = Date.now();
	 		require('Tips').open('再按一次退出应用');

	 	}else{
	 		if (Date.now() - this._BackTime > 3000){
	         	this._BackTime = 0;
	         	return;
	 		}

	 		new CrossCall(function(){
	 			navigator.app.exitApp();
	 		}).exec();  
	 	}
	}


	//检测网络
	checkConnection(){
		var networkState = self.navigator.connection ? navigator.connection.type : '';
		var status = true;

	    if(networkState === 'none'){
	    	require('Tips').open('请检查你的网络连接');
	    	status = false;
	    }

	    return status;
	}

	//检测页面是否登录过期
	checkLogin(){

		var loginStatus = true;

		new Ajax('/user_store/list_id').data({
			'id':signModel.findOne().id,
			'did':App.uuid,
			'tk':signModel.findOne().token
		}).success(function(res){
			if(res.status == 5){
				loginStatus = false;
				alert('登录过期，请重新登录！',function(){
					signModel.update({'id':signModel.findOne().id},{'token':null});
					new CrossCall(function(){
						window.location.reload();
					}).exec();
				},'提示消息','确定');
			}
			
		}.bind(this)).error(function(res){
			console.log(res);
		}).post(false);

		return loginStatus;

	}



}	





module.exports = new Router();







