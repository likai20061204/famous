var Node = require("famous/core/Node");
var DOMElement = require('famous/dom-renderables/DOMElement');
var GestureHandler = require("famous/components/GestureHandler") ;
var timer = null;
/**
*RefreshView 提供下拉上拉刷新服务
*/
function RefreshView (view, arg) {
	Node.call(this);
   
	
    this.el = new DOMElement(this,{
        classes:['page-content']
    }).setProperty("overflow","hidden");
    this.view = this.addChild()
        .setSizeMode('default', 'default')
        .setAbsoluteSize(null, 1);

    this.GestureHandler = new GestureHandler(this);
    this.GestureHandler.on('drag', this._onDrag.bind(this));

    //初始参数
    this.opt = {
    	threshold:      60,   //拉动阈值单位PX
        animate:        false, //TODO 是否开启动画
        down:           true,  //是否开启下拉
        topView:        null,  //头部样式
        up:             true,  //是否开启上拉
        bottomView:     null,  // 底部样式
        lock:           false, //锁定
        onStart:        null,  //开始拖动触发事件
        onMove :        null,  //拖动中触发事件   
        onEnd:          null   //拖动中触发事件

        
    }
    this.optInit(arg);
    //记录移动状态
    this._oldStat = [];
    this._moveStat = [];
    //创建头部节点
    this.topView = this.view.addChild()
        .setSizeMode('default', 'absolute')
        .setAbsoluteSize(null, this.opt.threshold);
    if (this.opt.topView){
        this.opt.topView(this.topView);
        
    }
    //创建内容节点
    this.view.setPosition(0, -this.opt.threshold);
    this.contentView = this.view.addChild(view).setPosition(0, this.opt.threshold);
    
    //创建底部节点
    this.bottomView = this.view.addChild()
        .setSizeMode('default', 'absolute')
        .setAbsoluteSize(null, this.opt.threshold);;
    if (this.opt.bottomView){
        this.opt.bottomView(this.bottomView);
    }

    this.contentView.addComponent({
        onSizeChange:function(x,y,z){
            if (!x) return;
            this.bottomView.setPosition(0, this.opt.threshold+y);
        }.bind(this)
    });
    
}

RefreshView.prototype = Object.create(Node.prototype);
RefreshView.prototype.constructor = RefreshView;

// 初始化 参数
RefreshView.prototype.optInit =function(opt){
    for(var k in opt ){
     	this.opt[k] = opt[k];
    }
     
}

RefreshView.prototype._onDrag = function(e){
	
    if (this.opt.lock) 
        return;

    if (e.status === 'start'){
        this._oldStat = this.view.getPosition()[1];
        this._moveStat = this._oldStat;
        return;
    }

    if (e.status === 'move'){
        var newPosY = this._moveStat += e.centerDelta.y,
            newStat = newPosY - this._oldStat;

        if (!this.opt.down && newStat > 0) return;
        if (!this.opt.up && newStat < 0) return;
        if (Math.abs(newStat) > this.opt.threshold)
            return;
       
        this.onMove(newStat);
        this.view.setPosition(null, newPosY);
    }

    if (e.status === 'end'){
        this.view.setPosition(null, this._oldStat);
        if (this._moveStat - this._oldStat > this.opt.threshold/2)
            this.onPullDown();
        else if (this._moveStat - this._oldStat < -this.opt.threshold/2)
            this.onPullUp();
        

    }


    
}


RefreshView.prototype.lock = function(){
	this.opt.lock = true;
}

RefreshView.prototype.unlock = function(){
	this.opt.lock = false;
}


RefreshView.prototype.onPullDown = function(){
console.log("onPullDown");
}


RefreshView.prototype.onPullUp = function(){
    console.log("onPullUp");
}


RefreshView.prototype.onMove = function(len){
    console.log(len);
}



module.exports = RefreshView;