var Node = require("famous/core/Node");
var DOMElement = require('famous/dom-renderables/DOMElement');
var GestureHandler = require("famous/components/GestureHandler") ;
var timer = null;
/**
*ListView 解决 一次加载太多节点出现假死问题
*/
function ListView (arg) {
	Node.call(this);

	this._allData = [];
	this._domList = [];
    this._lock = false;

    //初始参数
    this.opt = {
        threshold:2,//预加载数 单位个（请根据item 高度适当调整）
        throttle:32,//单位毫秒 控制Scroll执行频率
        itemSize:[200,65],//item  尺寸
        margin:[0,0,0,0], // Margin
        animate:false, //TODO 是否开启动画
        createItem:null
        
    }
    this.optInit(arg);

	//存放已经渲染的第一个节点和最后一个节点
    this._temp = null;
    
    this.scrollTop = 0;
    //height+marginTop = itemH
    this.itemH = this.opt.itemSize[1]+this.opt.margin[0];
    
	
    this.linked = new LinkedListViewSequence([]);

    //this._addPullDownRefreshNode();
    //this._addPullUpRefreshNode();
    this._addScrollCentent();

	this.c.addUIEvent("scroll");
	this.addUIEvent("click");
    this.addUIEvent("touchstart");

	this.addComponent({
		onSizeChange:function(x,y,z){
            if(!x)
                return;
			this.renderDom();
		}.bind(this)
	}); 

    
}
ListView.prototype = Object.create(Node.prototype);

// 初始化 参数
ListView.prototype.optInit =function(opt){
    for(var k in opt ){
     	this.opt[k] = opt[k];
    }

    if( this.opt.createItem === null )
     	throw new Error('createItem is null');
     
}

ListView.prototype.renderDom = function(){
    
    if( this.opt.itemMax === undefined){
    	this.height = this.getSize()[1];
    	this.opt.itemMax = 0|(this.height/this.itemH) + this.opt.threshold*2;

    }
    //初始化Dom 节点
    this._domList = this.linked.slice(0, this.opt.itemMax);
    for (var i = 0; i < this._domList.length; i++) {
    	this.c.addChild( this.createItem( this._domList[i] ) );
    	this._domList[i]._isMounted = true;
    	this._domList[i]._index = i;
    };
}
ListView.prototype.onReceive = function (e, p) {
  
	if( e === 'scroll' && !this._lock){
        this.top = p.scrollTop;
        if (timer)
            return;

        timer = setTimeout(function () {
            this.throttle();
            timer = 0;
        }.bind(this), this.opt.throttle);
       

	}

	// if( e==="click"){
	// 	console.log(p.node);
	// }

    if( e==="touchstart"&& this.linked[this.linked.length-1]==this._domList[this._domList.length-1]){

    }
}

ListView.prototype.lock = function(){
    this._lock = true;
    this.c.el.setProperty('overflow-y','hidden');
}

ListView.prototype.unLock = function(){
    this._lock = false;
    this.c.el.setProperty('overflow-y','scroll');
}

ListView.prototype.isLock = function(){
    return this._lock;
}
//节流函数
ListView.prototype.throttle = function (arg) {

   
    this._onScroll( this.top );

    this.scrollTop = this.top;
}

//绑定数据
ListView.prototype.BindData = function(arr) {

    for (var i = 0; i < arr.length; i++) {
    	
    	this.linked.insert(arr[i]);
    };
    
};

ListView.prototype.createItem = function( obj ){

	var o = this.opt,h=this.itemH;
    return this.opt.createItem(obj.data,  obj)
    .setPosition( o.margin[3], obj._id*h, 0 )
    .setAbsoluteSize(o.itemSize[0], o.itemSize[1] );
}

//设置下拉或上拉样式
ListView.prototype.setPullStyle = function(){

}

ListView.prototype._addPullDownRefreshNode = function(){
    this.addChild(this.setPullStyle()).setSizeMode( 'relative', 'absolute' )
        .setAbsoluteSize( 1, 1 , 1)
        .setMountPoint( 0, 1, 0 )
        .setAlign( 0, 1, null )
        .setProportionalSize( null, 60);
};

ListView.prototype._addPullUpRefreshNode = function(){
    this.addChild(this.setPullStyle()).setSizeMode( 'relative', 'absolute' )
        .setAbsoluteSize( 1, 1 ,2)
        .setMountPoint( 0, 1, 0 )
        .setAlign( 0, 1, null )
        .setProportionalSize( null, 60);
};

ListView.prototype._addScrollCentent = function(){
    
    this.c = this.addChild()
        .setSizeMode( 'relative', 'relative' )
        //.setAbsoluteSize( null, 88 / App.devicePixelRatio )
        .setProportionalSize( 1, 1, 3);

    this.c.el = new DOMElement(this.c,{
        classes:['page-content']
    }).setProperty("overflow-y", "scroll").setProperty("overflow-x","hidden");
    
};

ListView.prototype.onScrollEnd = function() {
	//ToDo
};

//添加节点
ListView.prototype.AddData = function(arr, index) {
	//ToDo
    this.BindData(arr);
    this._onScroll(this.scrollTop);
	//this.initItem();
};

//删除Item
ListView.prototype.RemoveItem =function(index){

    var item = this.linked.splice(index, 1)[0];

    if (!item || !item._isMounted)  return;

    //找到下一个节点
    var next = this.linked.findByIndex(this._domList[this._domList.length-1]._id+1);
    if (next === undefined){
        next = this.linked.findByIndex(this._domList[0]._id-1);
       
    }

    item._isMounted = false;
    this.c.removeChild(this.c.getRawChildren()[item._index]);
    //节点长度不够 this.opt.itemMax 直接返回
    if (item===next || next === undefined){
        // 重新获得Domlist
        this._onScroll( this.scrollTop );
        return this.reSetItem();
    }

    next._index = item._index;
    next._isMounted = true;
     
    // 挂载新节点
    this.c.addChild( this.createItem( next ));
    // 重新获得Domlist
    this._onScroll( this.scrollTop );
    //重置Position
    this.reSetItem();
        

}
// 初始化节点位置
ListView.prototype.initItem = function  () {
	
	var o = this.opt,h=this.itemH;
	this._allData.forEach( function (v, i ) {

		v.setPosition( o.margin[3], i*h, 0 );
		v.setAbsoluteSize(o.itemSize[0], o.itemSize[1] );
	})

	this.contentH = this._allData.length * h;
}

// 初始化节点位置
ListView.prototype.reSetItem = function  () {
    
    var o = this.opt,
    h=this.itemH,
    child = this.c.getRawChildren();
    this._domList.forEach( function (v, i ) {
        
        child[v._index].setPosition( o.margin[3], (v._id)*h, 1 );
        //v.setAbsoluteSize(o.itemSize[0], o.itemSize[1] );
    })

}


//渲染节点
ListView.prototype._addItem2Dom = function(item, index) {
    

    if (this._domList.length < this.opt.itemMax){
        this.c.addChild( this.createItem( item ));
        item._isMounted = true;
        item._index = index;
        return;
    }
    this._temp = this._domList[ this.opt.itemMax-1-index ];
    this._temp._isMounted = false;
    item._isMounted = true;

    // 添加item 在 DomList 里的下标
    item._index = this._temp._index;

    // 移除不必要节点
    this.c.removeChild(this.c.getRawChildren()[item._index]); 
    // 挂载新节点
    this.c.addChild( this.createItem( item ));

};


//获取应渲染节点
ListView.prototype._onScroll = function(top) {
	//修正最小下标
    var domTop = top - this.opt.threshold*this.itemH;
        domTop < 0 ? domTop = 0 : domTop = domTop;
        domTop = 0|(domTop/this.itemH);

    var item = this.linked.slice( domTop,  domTop+this.opt.itemMax);
    //修正正最大下标
    if (item.length < this.opt.itemMax){
        item = this.linked.slice(-this.opt.itemMax);
    }

    for (var i = 0; i < item.length; i++) {
        if (item[i]._isMounted) 
            continue;
        this._addItem2Dom(item[i], i);
    };
    //console.log(item);
    this._domList = item;
};

//内部对象
function LinkedListViewSequence(arr){

	this._arr = [];
    for (var i in arr) {
    	this.insert( arr[i] );
    };
} 

LinkedListViewSequence.prototype = {
    get length(){
        return this._arr.length;
    }
};

LinkedListViewSequence.prototype.findByIndex = function(index){
    return this._arr[index];
}

LinkedListViewSequence.prototype.insert = function(obj){
    this._arr.push ( { _isMounted:false, _id:this._arr.length, data: obj} ); 
}


LinkedListViewSequence.prototype.slice = function(...x){
	return [].slice.apply(this._arr, x);
}

LinkedListViewSequence.prototype.splice = function(...x){
    var item = [].splice.apply(this._arr, x);

    this._arr.forEach(function(v, i){
        v._id = i;
    })

    return item;
}
module.exports = ListView;