/**
*  为window OR webworker 提供全局 alert、confirm、prompt、beep 函数。
*  依赖 cordova-plugin-dialogs 扩展
*/

var CrossCall = require("famous/core/CrossCall");
var _self = (typeof window == "undefined") ? self: window;

/**
*Shows a custom alert or dialog box. Most Cordova implementations use a native dialog box for this feature,
 but some platforms use the browser's alert function, which is typically less customizable.
* 
*Example
*
*alert(
    'You are the winner!',  // message
    alertDismissed,         // callback
    'Game Over',            // title
    'Done'                  // buttonName
*);	
*/
_self.alert = function(message, resultCallback, title, buttonLabel) {
	_call ("alert", message, resultCallback, title, buttonLabel)
}
/**
*Displays a customizable confirmation dialog box.
* 
*Example
*
*confirm(
    'You are the winner!', // message
     onConfirm,            // callback to invoke with index of button pressed
    'Game Over',           // title
    ['Restart','Exit']     // buttonLabels
);
*/
_self.confirm = function(message, resultCallback, title, buttonLabels) {
	_call ("confirm", message, resultCallback, title, buttonLabels);
}

/**
* Displays a native dialog box that is more customizable than the browser's prompt function.
* 
* message: Dialog message. (String)
* resultCallback: Callback to invoke with index of button pressed (1, 2, or 3) or when the dialog is dismissed without a button press (0). (Function)
* title: Dialog title (String) (Optional, defaults to Prompt)
* buttonLabels: Array of strings specifying button labels (Array) (Optional, defaults to ["OK","Cancel"])
* defaultText: Default textbox input value (String) (Optional, Default: empty string)
*
*Example
*
*prompt(
    'Please enter your name',  // message
    onPrompt,                  // callback to invoke
    'Registration',            // title
    ['Ok','Exit'],             // buttonLabels
    'Jane Doe'                 // defaultText
);
*/
_self.prompt = function(message, resultCallback, title, buttonLabels, defaultText) {
	_call ("prompt", message, resultCallback, title, buttonLabels, defaultText);
}

/**
* The device plays a beep sound.
* times: The number of times to repeat the beep. (Number)
*/
_self.beep = function(times){
    _call ("beep", times);
}



function  _call(name, message, resultCallback, title, buttonLabels, defaultText) {
	new CrossCall(function (name, message, title, buttonLabels, defaultText) {
		navigator.notification[name].call(
			navigator.notification,
			message,
			function (arg) {
	            self._call(arg);

		    },title, buttonLabels, defaultText);
	}, [name, message, title, buttonLabels, defaultText]).exec(function (arg) {

		if( resultCallback)
			resultCallback(arg);
	});	
}
