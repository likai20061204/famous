var Node = require( 'famous/core/Node' );
var DOMElement = require( 'famous/dom-renderables/DOMElement' );


class Page extends Node {
	constructor( opt ){
		super();
		opt = opt || {};

		this._el = new DOMElement( this, opt );
		this._el.addClass('white_backgound');
		this._status = "Dead";
	}

	to( id, opt ) {
		this._updater.getContext(this.getLocation())._Router.to( id, opt );
		return this;
	}

	back( opt ) {
		this._updater.getContext(this.getLocation())._Router.back( opt );
		return this;
	}


	getDOM() {
		return this._el;
	}
	//通常用于Page初始化设置
	onCreate() {
		this.showInEngine(true);
      	//this._ContentNode = this.addChild();
	}  
	//当Page可见未获得用户焦点不能交互时系统会调用	
	onStart() {

		this._status = "Running";
	}    
	//当Page已经停止然后重新被启动时系统会调用
	onRestart() {

		this.showInEngine(true);
		this._status = "Running";
	}   
	//当Page可见且获得用户焦点能交互时系统会调用
	onResume() {
		this._status = "Running";
	}  
	//当系统启动另外一个新的Page时,在新Page启动之前被系统调用保存现有的Page中的持久数据、停止动画等,这个实现方法必须非常快。
	onPause() {

		this._status = "Paused";
	}  
	//当Page被新的Page完全覆盖不可见时被系统调用
	onStop() {
		this.showInEngine(false);
		this._status = "Stopped";
	}  
	//当Page(用户调用finish()或系统由于内存不足)被系统销毁杀掉时系统调用,（整个生命周期只调用1次）用来释放onCreate ()方法中创建的资源
	onDestroy() {
		this.showInEngine(true);
		this._status = "Dead";
		//this.dismount();
	}

	finish() {
		this.onDestroy();
	}  


}	
module.exports = Page;