'use strict';
var Commands = require("./Commands");

/**
 * 提供web主线程与worker间函数互相调用的能力
 *
 * @class Chan
 * @constructor
 * @return {undefined} undefined
 */
function Chan () {
	this.running = false;
	this._funList={};
	this._CallList={};
}

/**
 *设置通道
 *
 * @method
 *
 * @param {channel} 
 */
Chan.prototype.setChannel = function( ch ) {
	this._channel = ch;
	this.start();
};

Chan.prototype.start = function () {
	this._running = true;
}

Chan.prototype.stop = function(){
	this._running = false;
}

/**
 *添加执行函数和回调函数。
 *
 * @method
 *
 * @param {function} 执行函数
 * @param {function} 回调函数
 */
Chan.prototype.add = function( fun, call , param ){ 
    var id = new Date();
        id = "id"+id.getTime()+ Math.ceil((Math.random()*10000));

    this._funList[id] = call;
    this._push({id: id, args: param, fun: fun.toString()});

}

/**
 *向channel 推送数据。
 *
 * @method
 *
 * @param {object} obj.id 、obj.res、 obj.fun
 */
Chan.prototype._push = function( arg ){
	if( !this._running)return;

    var CROSS_THREAD_MESSAGE = [Commands.ENGINE, Commands.CROSS_THREAD, arg];
    if( this._channel.sendMessage)
        this._channel.sendMessage(CROSS_THREAD_MESSAGE);
    else
    	this._channel.postMessage(CROSS_THREAD_MESSAGE);
}

/**
 *channel.onMessage 时调用。
 *
 * @method
 *
 * @param {object} obj.id 、obj.res、 obj.fun
 */
Chan.prototype.callback = function ( arg ) {
    
	if(!arg.hasOwnProperty("res")){
		new funCaller(this, arg).exec();
     
	}else if(this._funList[arg.id]){

		this._funList[arg.id]( arg.res );
		this._funList[arg.id] = null;

		delete this._funList[arg.id];
	}
}

function funCaller  (ch, arg) {
	
	this.chan = ch 
	this.fun = arg.fun;
	this.id = arg.id;

	if( !Array.isArray(arg.args) )
		arg.args = [];
	this.arg = arg.args;
}


funCaller.prototype.exec = function  (argument) {
	var self = this;
    //暂时用Function 期待更好的方法。 
    this.fun = eval("("+this.fun+")");

    var res = this.fun.apply(this, this.arg);

	if( typeof res != "undefined")
		self._call(res);
}

funCaller.prototype._call = function ( arg ) {

	this.chan._push({id:this.id, res:arg});
}


module.exports =  new Chan();